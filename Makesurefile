#
# Library functions used in the goals below
#

@lib templating
  from-template() { 
    config="./.env"
    template="$1"
    destination="$2"

    cp "$template" "$destination"

    while read line; do
      setting="$( echo "$line" | cut -d '=' -f 1 )"
      value="$( echo "$line" | cut -d '=' -f 2- )"
      sed -i -e "s;%${setting}%;${value};g" "$destination"
    done < "$config"
  }

###
# Make sure system dependencies are installed
###

@goal dependencies_installed
@doc Installs all dependencies
@depends_on docker_installed
@depends_on code_server_installed
@depends_on coral_tpu_installed

# Docker
@goal docker_installed
@doc Installs Docker from the install script
@reached_if which docker > /dev/null 2>&1
  curl -fsSL https://get.docker.com -o /tmp/get-docker.sh
  sudo sh /tmp/get-docker.sh
  rm /tmp/get-docker.sh
  sudo usermod -aG docker $USER
  newgrp docker

# Code Server
@goal code_server_installed
@doc Installs code server using the install script
  latest_version=$(curl -fsSL https://api.github.com/repos/coder/code-server/releases | awk 'match($0,/.*"html_url": "(.*\/releases\/tag\/.*)".*/)' | head -n 1 | awk -F '"' '{print $4}')
  latest_version="${latest_version#https://github.com/coder/code-server/releases/tag/}"
  latest_version="${latest_version#v}"

  installed_version=$((dpkg-query --showformat='${Version}\n' --show code-server 2> /dev/null) || echo "0")

  if [ $installed_version != $latest_version ]; then
    curl -fsSL https://code-server.dev/install.sh | sh
  fi

  mkdir -p ~/.config/code-server
  cp -f ./code/config.yaml ~/.config/code-server/config.yaml
  sudo systemctl enable code-server@$USER
  sudo systemctl restart code-server@$USER

# Coral TPU
@goal coral_tpu_installed
@doc Installs runtime for the Coral TPU
@reached_if dpkg-query --show libedgetpu1-std > /dev/null 2>&1
  echo "deb https://packages.cloud.google.com/apt coral-edgetpu-stable main" | sudo tee /etc/apt/sources.list.d/coral-edgetpu.list
  curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/trusted.gpg.d/coral-edgetpu.gpg
  sudo apt-get update
  sudo apt-get install libedgetpu1-std

###
# Make sure config files needed to get everything running are generated
###

@goal config_generated
@doc Ensures everything is generated
@depends_on caddy_generated
@depends_on grafana_generated
@depends_on prometheus_generated

@goal caddy_generated
@doc Generates the caddy config from the template, substituting in any secrets from .env
@use_lib templating
    from-template caddy/Caddyfile.template caddy/Caddyfile

@goal grafana_generated
@doc Generates the grafana config from the template, substituting in any secrets from .env
@use_lib templating
    from-template grafana/config.monitoring.template grafana/config.monitoring

@goal prometheus_generated
@doc Generates the prometheus config from the template, substituting in any secrets from .env
@use_lib templating
    from-template prometheus/config/prometheus.template.yml prometheus/config/prometheus.yml

###
# Ensure all services are running
###

@goal running
@depends_on docker_compose_running

@goal docker_compose_running
@doc Ensures the docker compose services are running
  docker compose build caddy
  docker compose up -d --remove-orphans

###
# Ensure the system is cleaned
###

@goal cleaned
@depends_on docker_cleaned

@goal docker_cleaned
@doc Cleans up unused Docker resources
  docker system prune -f

###
# The default goal which ensures that everything is set up and running correctly
###

@goal default
@depends_on dependencies_installed
@depends_on config_generated
@depends_on running
@depends_on cleaned
