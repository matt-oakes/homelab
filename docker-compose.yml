x-service-defaults:
  &service-defaults
  restart: unless-stopped

# Define each service
services:
  #
  # Caddy HTTP server
  # Provide HTTPS access to the other services while automatically handling certificate creation and renewal for the domain name
  #
  caddy:
    <<: *service-defaults
    build: caddy
    container_name: caddy
    ports:
      - 80:80
      - 443:443
      - 2019:2019
    volumes:
      - ./caddy/config:/config
      - ./caddy/data:/data
      - ./caddy/logs:/var/log/caddy
    extra_hosts:
      - host.docker.internal:host-gateway

  #
  # qBittorrent
  # Bittorrent client with a web interface
  #
  torrent:
    <<: *service-defaults
    image: ghcr.io/hotio/qbittorrent:release-5.0.3
    container_name: torrent
    environment:
      PUID: 1000
      PGID: 1000
      UMASK: 002
      TZ: Europe/London
      VPN_ENABLED: '${TORRENT_VPN_ENABLED:?err}'
      VPN_PROVIDER: proton
      VPN_LAN_NETWORK: 192.168.188.0/24
      VPN_LAN_LEAK_ENABLED: false
      VPN_AUTO_PORT_FORWARD: true
      VPN_KEEP_LOCAL_DNS: false
      VPN_FIREWALL_TYPE: auto
      VPN_HEALTHCHECK_ENABLED: true
      PRIVOXY_ENABLED: false
      UNBOUND_ENABLED: false
    volumes:
      - ./torrent/config:/config
      - ./torrent/downloads:/downloads
      - /lib/modules:/lib/modules
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1

  #
  # Wireguard Server
  # Allows devices to connect into the local network remotely. This also provides an admin interface
  #
  wireguard:
    <<: *service-defaults
    image: ghcr.io/wg-easy/wg-easy:14
    container_name: wireguard
    hostname: wireguard
    environment:
      TZ: Europe/London
      WG_HOST: '${WIREGUARD_HOSTNAME:?err}'
    volumes:
      - ./wireguard:/etc/wireguard
    ports:
      - 51820:51820/udp
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1

  #
  # Home Assistant
  #
  homeassistant:
    <<: *service-defaults
    image: linuxserver/homeassistant:2025.2.4
    container_name: homeassistant
    network_mode: host
    privileged: true
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/London
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./homeassistant/config:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro

  #
  # ESPHome
  #
  esphome:
    <<: *service-defaults
    image: ghcr.io/esphome/esphome:2025.2.2
    container_name: esphome
    network_mode: host
    privileged: true
    environment:
      TZ: Europe/London
    volumes:
      - ./esphome:/config
      - /etc/localtime:/etc/localtime:ro

  #
  # zigbee2mqtt
  #
  zigbee2mqtt:
    <<: *service-defaults
    image: koenkk/zigbee2mqtt:2.1.1
    container_name: zigbee2mqtt
    user: 1000:1000
    group_add:
      - dialout
    environment:
      TZ: Europe/London
    volumes:
      - ./zigbee2mqtt:/app/data
      - /run/udev:/run/udev:ro
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0

  #
  # Frigate NVR
  #
  frigate:
    <<: *service-defaults
    image: ghcr.io/blakeblackshear/frigate:0.14.1-standard-arm64
    container_name: frigate
    privileged: true
    shm_size: "64mb" # Comfigure shared memory based on the number of cameras. 64MB is good enough for 2-3 cameras detecting at 720
    devices:
      - /dev/bus/usb:/dev/bus/usb # USB Coral TPU
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./frigate/config:/config
      - ./frigate/media:/media/frigate
      - ./frigate/cache:/tmp/cache
    ports:
      - "172.17.0.1:5000:5000"
      - 8554:8554 # RTSP feeds
      - 8555:8555/tcp # WebRTC over tcp
      - 8555:8555/udp # WebRTC over udp
    environment:
      FRIGATE_RTSP_PASSWORD: '${FRIGATE_RTSP_PASSWORD:?err}'

  #
  # Jellyfin media server
  #
  jellyfin:
    <<: *service-defaults
    image: linuxserver/jellyfin:10.10.5
    container_name: jellyfin
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/London
      JELLYFIN_PublishedServerUrl: 'jellyfin.${DOMAIN:?err}'
    volumes:
      - ./jellyfin/config:/config
      - ./media/tvshows:/data/tvshows
      - ./media/movies:/data/movies
    ports:
      - 8096:8096
      - 8920:8920
      - 7359:7359/udp
      - 1900:1900/udp

  #
  # MQTT message broker
  #
  mqtt:
    image: eclipse-mosquitto:2.0.20
    container_name: mqtt
    <<: *service-defaults
    user: 1000:1000
    volumes:
      - ./mqtt/config:/mosquitto/config
      - ./mqtt/data:/mosquitto/data
      - ./mqtt/log:/mosquitto/log
    ports:
      - 1883:1883
      - 9001:9001

  #
  # Backup with duplicati
  #
  backup:
    <<: *service-defaults
    image: linuxserver/duplicati:2.1.0
    container_name: backup
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/London
    volumes:
      - ./backup/config:/config
      - ./backup/data:/backups
      - .:/source
    ports:
      - 8200:8200
