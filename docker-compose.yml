version: "3.7"

x-service-defaults:
  &service-defaults
  restart: unless-stopped

# Define any volumes to store data
volumes:
  caddy-config:
  caddy-data:
  grafana-data:
  prometheus-data:

# Define each service
services:
  #
  # Caddy HTTP server
  # Provide HTTPS access to the other services while automatically handling certificate creation and renewal for the domain name
  #
  caddy:
    <<: *service-defaults
    build: caddy
    container_name: caddy
    ports:
      - 80:80
      - 443:443
      - 2019:2019
    volumes:
      - caddy-config:/config
      - caddy-data:/data
      - ./caddy/logs:/var/log/caddy
    extra_hosts:
      - host.docker.internal:host-gateway

  #
  # qBittorrent
  # Bittorrent client with a web interface
  #
  torrent:
    <<: *service-defaults
    image: hotio/qbittorrent:release-4.5.4
    container_name: torrent
    environment:
      PUID: 1000
      PGID: 1000
      UMASK: 002
      TZ: Europe/London
      VPN_ENABLED: '${TORRENT_VPN_ENABLED:?err}'
    volumes:
      - ./torrent/config:/config
      - ./torrent/downloads:/downloads
      - /lib/modules:/lib/modules
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=0
  
  #
  # Wireguard Server
  # Allows devices to connect into the local network remotely. This also provides an admin interface
  #
  wireguard:
    <<: *service-defaults
    image: weejewel/wg-easy
    container_name: wireguard
    hostname: wireguard
    environment:
      TZ: Europe/London
      WG_HOST: '${WIREGUARD_HOSTNAME:?err}'
    volumes:
      - ./wireguard:/etc/wireguard
    ports:
      - 51820:51820/udp
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
  
  #
  # Jellyfin media server
  #
  jellyfin:
    <<: *service-defaults
    image: linuxserver/jellyfin:10.8.10
    container_name: jellyfin
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/London
      JELLYFIN_PublishedServerUrl: 'jellyfin.${DOMAIN:?err}'
    devices:
      - "/dev/video10:/dev/video10"
      - "/dev/video11:/dev/video11"
      - "/dev/video12:/dev/video12"
    volumes:
      - ./jellyfin/config:/config
      - ./media/tvshows:/data/tvshows
      - ./media/movies:/data/movies
    ports:
      - 8096:8096
      - 8920:8920
      - 7359:7359/udp
      - 1900:1900/udp

  #
  # MQTT message broker
  #
  mqtt:
    image: eclipse-mosquitto:2.0.17
    container_name: mqtt
    <<: *service-defaults
    user: 1000:1000
    volumes:
      - ./mqtt/config:/mosquitto/config
      - ./mqtt/data:/mosquitto/data
      - ./mqtt/log:/mosquitto/log
    ports:
      - 1883:1883
      - 9001:9001

  #
  # Prometheus for data collection
  #
  prometheus:
    <<: *service-defaults
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    volumes:
      - ./prometheus/config:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
  
  #
  # Grafana for displaying collected data
  #
  grafana:
    <<: *service-defaults
    image: grafana/grafana:10.1.1
    container_name: grafana
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    env_file:
      - ./grafana/config.monitoring

  #
  # Container to run speed tests and send the results to Prometheus
  #
  speedtest:
    <<: *service-defaults
    image: ghcr.io/miguelndecarvalho/speedtest-exporter:v3.5.4
    container_name: speedtest
    expose:
      - 9798
    ports:
      - 9798:9798

  #
  # Container to monitor the Pi itself and export details to Prometheus
  #
  pi_monitor:
    <<: *service-defaults
    image: prom/node-exporter:v1.6.1
    container_name: pi_monitor
    privileged: true
    ports:
      - 9100:9100
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  #
  # Service to manage files through FileBrowser
  #
  filebrowser:
    image: filebrowser/filebrowser:v2.25.0-s6
    container_name: filebrowser
    <<: *service-defaults
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/London
      FB_NOAUTH: noauth
    volumes:
      - ./filebrowser/database:/database
      - ./filebrowser/config:/config
      - ./:/srv
