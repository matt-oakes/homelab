version: "3.7"

x-service-defaults:
  &service-defaults
  depends_on:
    - pihole
  restart: unless-stopped
  networks:
    - internal
  dns:
    - 172.16.238.100

# Define internal docker networks for container connectivity
networks:
  internal:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.238.0/24

# Define any volumes to store data
volumes:
  caddy-config:
  caddy-data:
  grafana-data:
  prometheus-data:

# Define each service
services:
  #
  # Caddy HTTP server
  # Provide HTTPS access to the other services while automatically handling certificate creation and renewal for the domain name
  #
  caddy:
    <<: *service-defaults
    build: caddy
    container_name: caddy
    ports:
      - 80:80
      - 443:443
    volumes:
      - caddy-config:/config
      - caddy-data:/data
      - ./caddy/logs:/var/log/caddy

  #
  # Setup PiHole for DNS and ad blocking
  # Because this provided DNS for the entire home network, all services depend on this
  #
  pihole:
    image: pihole/pihole:2022.02.1
    container_name: pihole
    restart: unless-stopped
    environment:
      TZ: 'Europe/London'
      PIHOLE_UID: 1000
      PIHOLE_GID: 1000
      WEB_UID: 1000
      WEB_GID: 1000
      WEBPASSWORD: '${PIHOLE_WEBPASSWORD:?err}'
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 67:67/udp
    volumes:
      - ./pihole/data:/etc/pihole
      - ./pihole/dnsmasq.d:/etc/dnsmasq.d
    cap_add:
      - NET_ADMIN
    networks:
      internal:
        ipv4_address: 172.16.238.100

  #
  # Setup the Unifi Controller
  # Administering the local network, routers, and access points
  #
  unifi:
    <<: *service-defaults
    image: lscr.io/linuxserver/unifi-controller:7.0.25
    container_name: unifi
    environment:
      PUID: 1000
      PGID: 1000
      TZ: UTC
    ports:
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 8443:8443
      - 1900:1900/udp
      - 8843:8843
      - 8880:8880
      - 6789:6789
      - 5514:5514/udp
    volumes:
      - ./unifi/data:/config

  #
  # Wireguard Server
  # External access to the internal network
  #
  wireguard_server:
    <<: *service-defaults
    image: lscr.io/linuxserver/wireguard:1.0.20210914
    container_name: wireguard_server
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/London
      SERVERURL: '${WIREGUARD_SERVER_DOMAIN:?err}'
      PEERS: '${WIREGUARD_SERVER_PEERS:?err}'
      INTERNAL_SUBNET: 10.13.13.0
      ALLOWEDIPS: 10.13.13.1,192.168.1.0/24
      PEERDNS: auto
    ports:
      - 51820:51820/udp
    volumes:
      - ./wireguard_server/config:/config
      - /lib/modules:/lib/modules
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    <<: *service-defaults

  #
  # Prometheus for data collection
  #
  prometheus:
    <<: *service-defaults
    image: prom/prometheus:v2.33.5
    container_name: prometheus
    volumes:
      - ./prometheus/config:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
  
  #
  # Grafana for displaying collected data
  #
  grafana:
    <<: *service-defaults
    image: grafana/grafana:8.4.5
    container_name: grafana
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - 9999:3000
    env_file:
      - ./grafana/config.monitoring

  #
  # Container to run speed tests and send the results to Prometheus
  #
  speedtest:
    <<: *service-defaults
    image: ghcr.io/miguelndecarvalho/speedtest-exporter:v3.4.1
    container_name: speedtest
    expose:
      - 9798
    ports:
      - 9798:9798

  #
  # Container to monitor the Pi itself and export details to Prometheus
  #
  pi_monitor:
    <<: *service-defaults
    image: prom/node-exporter:v1.3.1
    container_name: pi_monitor
    privileged: true
    ports:
      - 9100:9100
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
